
Smart_Garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00002978  00002a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000cc  008000cc  00002a78  2**0
                  ALLOC
  3 .stab         00002478  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010fe  00000000  00000000  00004ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000629e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a73b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_7>
      20:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_8>
      24:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 12 	call	0x2440	; 0x2440 <main>
      8a:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ec       	ldi	r26, 0xC3	; 195
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ec       	ldi	r24, 0xC3	; 195
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_voidInit>:
u16 Global_u16CompareMatchValue_1B = 0 ;



void TIMER1_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
          SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    #elif (MODE == FAST_PWM_ICR1)
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     b4e:	af e4       	ldi	r26, 0x4F	; 79
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e4       	ldi	r30, 0x4F	; 79
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     b5c:	af e4       	ldi	r26, 0x4F	; 79
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e4       	ldi	r30, 0x4F	; 79
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
     b6a:	ae e4       	ldi	r26, 0x4E	; 78
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ee e4       	ldi	r30, 0x4E	; 78
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     b78:	ae e4       	ldi	r26, 0x4E	; 78
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ee e4       	ldi	r30, 0x4E	; 78
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24
/*          OC1A Mode Selection                 */
    #if (OC1A_MODE == DISCONNECTED)
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    #elif ((OC1A_MODE == SETonTOP_CLEARonCOMPARE) || (OC1A_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
     b86:	af e4       	ldi	r26, 0x4F	; 79
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ef e4       	ldi	r30, 0x4F	; 79
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
     b94:	af e4       	ldi	r26, 0x4F	; 79
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ef e4       	ldi	r30, 0x4F	; 79
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24

    #if (OC1B_MODE == DISCONNECTED)
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    #elif ((OC1B_MODE == SETonTOP_CLEARonCOMPARE) || (OC1B_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
     ba2:	af e4       	ldi	r26, 0x4F	; 79
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ef e4       	ldi	r30, 0x4F	; 79
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7e       	andi	r24, 0xEF	; 239
     bae:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
     bb0:	af e4       	ldi	r26, 0x4F	; 79
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e4       	ldi	r30, 0x4F	; 79
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	8c 93       	st	X, r24

    #endif


/*     TIMER1 Prescaller Selection      */
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
     bbe:	ae e4       	ldi	r26, 0x4E	; 78
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ee e4       	ldi	r30, 0x4E	; 78
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 7f       	andi	r24, 0xF8	; 248
     bca:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
     bcc:	ae e4       	ldi	r26, 0x4E	; 78
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ee e4       	ldi	r30, 0x4E	; 78
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     bda:	ae e4       	ldi	r26, 0x4E	; 78
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ee e4       	ldi	r30, 0x4E	; 78
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
     be8:	ae e4       	ldi	r26, 0x4E	; 78
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8b 7f       	andi	r24, 0xFB	; 251
     bf4:	8c 93       	st	X, r24
        SET_BIT(TCCR1B_REG,TCCR1B_CS12);
    #else
        #error  Wrong selection of Prescaller mode
    #endif

}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <TIMER1_voidSetCallBack_OVF>:

void TIMER1_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	00 d0       	rcall	.+0      	; 0xc02 <TIMER1_voidSetCallBack_OVF+0x6>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T1 = Local_PointerToFunction_OVF ;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	90 93 cd 00 	sts	0x00CD, r25
     c12:	80 93 cc 00 	sts	0x00CC, r24
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <TIMER1_voidSetCallBack_CTC_A>:


void TIMER1_voidSetCallBack_CTC_A (void (*Local_PointerToFunction_CTC) (void))
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <TIMER1_voidSetCallBack_CTC_A+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_TA = Local_PointerToFunction_CTC ;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	90 93 cf 00 	sts	0x00CF, r25
     c36:	80 93 ce 00 	sts	0x00CE, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <TIMER1_voidSetCallBack_CTC_B>:


void TIMER1_voidSetCallBack_CTC_B (void (*Local_PointerToFunction_CTC) (void))
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <TIMER1_voidSetCallBack_CTC_B+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_TB = Local_PointerToFunction_CTC ;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	90 93 d1 00 	sts	0x00D1, r25
     c5a:	80 93 d0 00 	sts	0x00D0, r24
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <TIMER1_voidSetPreloadValue>:



void TIMER1_voidSetPreloadValue ( u16 Local_u16PreloadValue )
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <TIMER1_voidSetPreloadValue+0x6>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
        TCNT1_REG = Local_u16PreloadValue ;
        Global_u16PreloadValue = Local_u16PreloadValue ;
    #else
        // No Action
    #endif
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <TIMER1_voidSetCompareMatchValue_T1A>:


void TIMER1_voidSetCompareMatchValue_T1A ( u16 Local_u16CompareMatchValue )
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <TIMER1_voidSetCompareMatchValue_T1A+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1A_REG = Local_u16CompareMatchValue ;
     c8e:	ea e4       	ldi	r30, 0x4A	; 74
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1A = Local_u16CompareMatchValue ;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	90 93 d5 00 	sts	0x00D5, r25
     ca2:	80 93 d4 00 	sts	0x00D4, r24
    #endif
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TIMER1_voidSetCompareMatchValue_T1B>:

void TIMER1_voidSetCompareMatchValue_T1B ( u16 Local_u16CompareMatchValue )
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <TIMER1_voidSetCompareMatchValue_T1B+0x6>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1B_REG = Local_u16CompareMatchValue ;
     cbe:	e8 e4       	ldi	r30, 0x48	; 72
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1B = Local_u16CompareMatchValue ;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	90 93 d7 00 	sts	0x00D7, r25
     cd2:	80 93 d6 00 	sts	0x00D6, r24
    #endif
}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <TIMER1_void_u16PWM_T1A>:


void TIMER1_void_u16PWM_T1A ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <TIMER1_void_u16PWM_T1A+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <TIMER1_void_u16PWM_T1A+0x8>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	7c 83       	std	Y+4, r23	; 0x04
     cf2:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1A ( Copy_u16CompareMatchValue );
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	0e 94 40 06 	call	0xc80	; 0xc80 <TIMER1_voidSetCompareMatchValue_T1A>
    ICR1_REG = Copy_u16TopValue ;
     cfc:	e6 e4       	ldi	r30, 0x46	; 70
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIMER1_void_u16PWM_T1B>:


void TIMER1_void_u16PWM_T1B ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <TIMER1_void_u16PWM_T1B+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <TIMER1_void_u16PWM_T1B+0x8>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	7c 83       	std	Y+4, r23	; 0x04
     d28:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1B ( Copy_u16CompareMatchValue );
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <TIMER1_voidSetCompareMatchValue_T1B>
    ICR1_REG = Copy_u16TopValue ;
     d32:	e6 e4       	ldi	r30, 0x46	; 70
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <__vector_9>:


/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)      __attribute__((signal)) ;
void __vector_9 (void)
{
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	5f 93       	push	r21
     d5e:	6f 93       	push	r22
     d60:	7f 93       	push	r23
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
    if (Global_PointerToFunction_OVF_T1 != NULL)
     d76:	80 91 cc 00 	lds	r24, 0x00CC
     d7a:	90 91 cd 00 	lds	r25, 0x00CD
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	29 f0       	breq	.+10     	; 0xd8c <__vector_9+0x40>
    {
    	Global_PointerToFunction_OVF_T1() ;
     d82:	e0 91 cc 00 	lds	r30, 0x00CC
     d86:	f0 91 cd 00 	lds	r31, 0x00CD
     d8a:	09 95       	icall
    }
}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)      __attribute__((signal)) ;
void __vector_8 (void)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
    if (Global_PointerToFunction_CTC_TB != NULL)
     ddc:	80 91 d0 00 	lds	r24, 0x00D0
     de0:	90 91 d1 00 	lds	r25, 0x00D1
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	29 f0       	breq	.+10     	; 0xdf2 <__vector_8+0x40>
    {
    	Global_PointerToFunction_CTC_TB() ;
     de8:	e0 91 d0 00 	lds	r30, 0x00D0
     dec:	f0 91 d1 00 	lds	r31, 0x00D1
     df0:	09 95       	icall
    }
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)      __attribute__((signal)) ;
void __vector_7 (void)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	2f 93       	push	r18
     e24:	3f 93       	push	r19
     e26:	4f 93       	push	r20
     e28:	5f 93       	push	r21
     e2a:	6f 93       	push	r22
     e2c:	7f 93       	push	r23
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	af 93       	push	r26
     e34:	bf 93       	push	r27
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
    if (Global_PointerToFunction_CTC_TA != NULL)
     e42:	80 91 ce 00 	lds	r24, 0x00CE
     e46:	90 91 cf 00 	lds	r25, 0x00CF
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	29 f0       	breq	.+10     	; 0xe58 <__vector_7+0x40>
    {
    	Global_PointerToFunction_CTC_TA() ;
     e4e:	e0 91 ce 00 	lds	r30, 0x00CE
     e52:	f0 91 cf 00 	lds	r31, 0x00CF
     e56:	09 95       	icall
    }
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <GIE_void_Enable>:
#include "GIE_Private.h"
#include "GIE_Config.h"


void GIE_void_Enable ( void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(SREG_REG,SREG_I);
     e86:	af e5       	ldi	r26, 0x5F	; 95
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e5       	ldi	r30, 0x5F	; 95
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <GIE_void_Disable>:
void GIE_void_Disable ( void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
         CLR_BIT(SREG_REG,SREG_I);
     ea2:	af e5       	ldi	r26, 0x5F	; 95
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ef e5       	ldi	r30, 0x5F	; 95
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8c 93       	st	X, r24
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DIO_voidSetPinDirection>:
#include "DIO_Config.h"



void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	29 97       	sbiw	r28, 0x09	; 9
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
     ece:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <DIO_voidSetPinDirection+0x22>
     ed6:	f6 c0       	rjmp	.+492    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	88 30       	cpi	r24, 0x08	; 8
     edc:	08 f0       	brcs	.+2      	; 0xee0 <DIO_voidSetPinDirection+0x2a>
     ede:	f2 c0       	rjmp	.+484    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	39 87       	std	Y+9, r19	; 0x09
     ee8:	28 87       	std	Y+8, r18	; 0x08
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	99 85       	ldd	r25, Y+9	; 0x09
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	39 f0       	breq	.+14     	; 0xf00 <DIO_voidSetPinDirection+0x4a>
     ef2:	28 85       	ldd	r18, Y+8	; 0x08
     ef4:	39 85       	ldd	r19, Y+9	; 0x09
     ef6:	21 30       	cpi	r18, 0x01	; 1
     ef8:	31 05       	cpc	r19, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <DIO_voidSetPinDirection+0x48>
     efc:	75 c0       	rjmp	.+234    	; 0xfe8 <DIO_voidSetPinDirection+0x132>
     efe:	e2 c0       	rjmp	.+452    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3f 83       	std	Y+7, r19	; 0x07
     f08:	2e 83       	std	Y+6, r18	; 0x06
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	59 f1       	breq	.+86     	; 0xf6a <DIO_voidSetPinDirection+0xb4>
     f14:	2e 81       	ldd	r18, Y+6	; 0x06
     f16:	3f 81       	ldd	r19, Y+7	; 0x07
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <DIO_voidSetPinDirection+0x72>
     f1e:	8e 81       	ldd	r24, Y+6	; 0x06
     f20:	9f 81       	ldd	r25, Y+7	; 0x07
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f0       	breq	.+26     	; 0xf40 <DIO_voidSetPinDirection+0x8a>
     f26:	ce c0       	rjmp	.+412    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	89 f1       	breq	.+98     	; 0xf94 <DIO_voidSetPinDirection+0xde>
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_voidSetPinDirection+0x88>
     f3c:	40 c0       	rjmp	.+128    	; 0xfbe <DIO_voidSetPinDirection+0x108>
     f3e:	c2 c0       	rjmp	.+388    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_voidSetPinDirection+0xa8>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_voidSetPinDirection+0xa4>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	ad c0       	rjmp	.+346    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    CLR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
     f6a:	a7 e3       	ldi	r26, 0x37	; 55
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e7 e3       	ldi	r30, 0x37	; 55
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_voidSetPinDirection+0xd2>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_voidSetPinDirection+0xce>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	98 c0       	rjmp	.+304    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    CLR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
     f94:	a4 e3       	ldi	r26, 0x34	; 52
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e4 e3       	ldi	r30, 0x34	; 52
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_voidSetPinDirection+0xfc>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_voidSetPinDirection+0xf8>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	83 c0       	rjmp	.+262    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    CLR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_voidSetPinDirection+0x126>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_voidSetPinDirection+0x122>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	6e c0       	rjmp	.+220    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3d 83       	std	Y+5, r19	; 0x05
     ff0:	2c 83       	std	Y+4, r18	; 0x04
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	49 f1       	breq	.+82     	; 0x104e <DIO_voidSetPinDirection+0x198>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	2c f4       	brge	.+10     	; 0x1010 <DIO_voidSetPinDirection+0x15a>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	61 f0       	breq	.+24     	; 0x1026 <DIO_voidSetPinDirection+0x170>
    100e:	5a c0       	rjmp	.+180    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	71 f1       	breq	.+92     	; 0x1076 <DIO_voidSetPinDirection+0x1c0>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	91 05       	cpc	r25, r1
    1022:	e9 f1       	breq	.+122    	; 0x109e <DIO_voidSetPinDirection+0x1e8>
    1024:	4f c0       	rjmp	.+158    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
    1026:	aa e3       	ldi	r26, 0x3A	; 58
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ea e3       	ldi	r30, 0x3A	; 58
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_voidSetPinDirection+0x18e>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_voidSetPinDirection+0x18a>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	3b c0       	rjmp	.+118    	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
    104e:	a7 e3       	ldi	r26, 0x37	; 55
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e7 e3       	ldi	r30, 0x37	; 55
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_voidSetPinDirection+0x1b6>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_voidSetPinDirection+0x1b2>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	27 c0       	rjmp	.+78     	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
    1076:	a4 e3       	ldi	r26, 0x34	; 52
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e4 e3       	ldi	r30, 0x34	; 52
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_voidSetPinDirection+0x1de>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_voidSetPinDirection+0x1da>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
    109e:	a1 e3       	ldi	r26, 0x31	; 49
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidSetPinDirection+0x206>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidSetPinDirection+0x202>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    10c4:	29 96       	adiw	r28, 0x09	; 9
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	28 97       	sbiw	r28, 0x08	; 8
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <DIO_voidSetPortDirection+0x20>
    10f4:	70 c0       	rjmp	.+224    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	38 87       	std	Y+8, r19	; 0x08
    10fe:	2f 83       	std	Y+7, r18	; 0x07
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	98 85       	ldd	r25, Y+8	; 0x08
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	31 f0       	breq	.+12     	; 0x1114 <DIO_voidSetPortDirection+0x3e>
    1108:	2f 81       	ldd	r18, Y+7	; 0x07
    110a:	38 85       	ldd	r19, Y+8	; 0x08
    110c:	21 30       	cpi	r18, 0x01	; 1
    110e:	31 05       	cpc	r19, r1
    1110:	81 f1       	breq	.+96     	; 0x1172 <DIO_voidSetPortDirection+0x9c>
    1112:	61 c0       	rjmp	.+194    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	3e 83       	std	Y+6, r19	; 0x06
    111c:	2d 83       	std	Y+5, r18	; 0x05
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 05       	cpc	r25, r1
    1126:	c9 f0       	breq	.+50     	; 0x115a <DIO_voidSetPortDirection+0x84>
    1128:	2d 81       	ldd	r18, Y+5	; 0x05
    112a:	3e 81       	ldd	r19, Y+6	; 0x06
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	2c f4       	brge	.+10     	; 0x113c <DIO_voidSetPortDirection+0x66>
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	61 f0       	breq	.+24     	; 0x1152 <DIO_voidSetPortDirection+0x7c>
    113a:	4d c0       	rjmp	.+154    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
    113c:	2d 81       	ldd	r18, Y+5	; 0x05
    113e:	3e 81       	ldd	r19, Y+6	; 0x06
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	71 f0       	breq	.+28     	; 0x1162 <DIO_voidSetPortDirection+0x8c>
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	69 f0       	breq	.+26     	; 0x116a <DIO_voidSetPortDirection+0x94>
    1150:	42 c0       	rjmp	.+132    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0x00 ;   break;
    1152:	ea e3       	ldi	r30, 0x3A	; 58
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	10 82       	st	Z, r1
    1158:	3e c0       	rjmp	.+124    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0x00 ;   break;
    115a:	e7 e3       	ldi	r30, 0x37	; 55
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	10 82       	st	Z, r1
    1160:	3a c0       	rjmp	.+116    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0x00 ;   break;
    1162:	e4 e3       	ldi	r30, 0x34	; 52
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	10 82       	st	Z, r1
    1168:	36 c0       	rjmp	.+108    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0x00 ;   break;
    116a:	e1 e3       	ldi	r30, 0x31	; 49
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	10 82       	st	Z, r1
    1170:	32 c0       	rjmp	.+100    	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	d1 f0       	breq	.+52     	; 0x11ba <DIO_voidSetPortDirection+0xe4>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <DIO_voidSetPortDirection+0xc4>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <DIO_voidSetPortDirection+0xda>
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <DIO_voidSetPortDirection+0x100>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <DIO_voidSetPortDirection+0xee>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	81 f0       	breq	.+32     	; 0x11ce <DIO_voidSetPortDirection+0xf8>
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0xff ;   break;
    11b0:	ea e3       	ldi	r30, 0x3A	; 58
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	80 83       	st	Z, r24
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0xff ;   break;
    11ba:	e7 e3       	ldi	r30, 0x37	; 55
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	80 83       	st	Z, r24
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0xff ;   break;
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	80 83       	st	Z, r24
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0xff ;   break;
    11ce:	e1 e3       	ldi	r30, 0x31	; 49
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
    11d6:	28 96       	adiw	r28, 0x08	; 8
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <DIO_voidSetWithValuePortDirection>:
void DIO_voidSetWithValuePortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_voidSetWithValuePortDirection+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_voidSetWithValuePortDirection+0x8>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	90 f5       	brcc	.+100    	; 0x1262 <DIO_voidSetWithValuePortDirection+0x7a>
    {
        // Do Nothing
    }
    else
    {
            switch(Copy_u8PortNumber)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3c 83       	std	Y+4, r19	; 0x04
    1206:	2b 83       	std	Y+3, r18	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	d1 f0       	breq	.+52     	; 0x1246 <DIO_voidSetWithValuePortDirection+0x5e>
    1212:	2b 81       	ldd	r18, Y+3	; 0x03
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_voidSetWithValuePortDirection+0x3e>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_voidSetWithValuePortDirection+0x54>
    1224:	1e c0       	rjmp	.+60     	; 0x1262 <DIO_voidSetWithValuePortDirection+0x7a>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	81 f0       	breq	.+32     	; 0x1250 <DIO_voidSetWithValuePortDirection+0x68>
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	81 f0       	breq	.+32     	; 0x125a <DIO_voidSetWithValuePortDirection+0x72>
    123a:	13 c0       	rjmp	.+38     	; 0x1262 <DIO_voidSetWithValuePortDirection+0x7a>
				{
					case DIO_PORTA :    DDRA_REG = Copy_u8Value ;   break;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	80 83       	st	Z, r24
    1244:	0e c0       	rjmp	.+28     	; 0x1262 <DIO_voidSetWithValuePortDirection+0x7a>
					case DIO_PORTB :    DDRB_REG = Copy_u8Value ;   break;
    1246:	e7 e3       	ldi	r30, 0x37	; 55
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <DIO_voidSetWithValuePortDirection+0x7a>
					case DIO_PORTC :    DDRC_REG = Copy_u8Value ;   break;
    1250:	e4 e3       	ldi	r30, 0x34	; 52
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <DIO_voidSetWithValuePortDirection+0x7a>
					case DIO_PORTD :    DDRD_REG = Copy_u8Value ;   break;
    125a:	e1 e3       	ldi	r30, 0x31	; 49
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
					default    :                        break;
				}

    }
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	29 97       	sbiw	r28, 0x09	; 9
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	6a 83       	std	Y+2, r22	; 0x02
    1288:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <DIO_voidSetPinValue+0x22>
    1290:	f6 c0       	rjmp	.+492    	; 0x147e <DIO_voidSetPinValue+0x20e>
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_voidSetPinValue+0x2a>
    1298:	f2 c0       	rjmp	.+484    	; 0x147e <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	39 87       	std	Y+9, r19	; 0x09
    12a2:	28 87       	std	Y+8, r18	; 0x08
    12a4:	88 85       	ldd	r24, Y+8	; 0x08
    12a6:	99 85       	ldd	r25, Y+9	; 0x09
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	39 f0       	breq	.+14     	; 0x12ba <DIO_voidSetPinValue+0x4a>
    12ac:	28 85       	ldd	r18, Y+8	; 0x08
    12ae:	39 85       	ldd	r19, Y+9	; 0x09
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	31 05       	cpc	r19, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <DIO_voidSetPinValue+0x48>
    12b6:	75 c0       	rjmp	.+234    	; 0x13a2 <DIO_voidSetPinValue+0x132>
    12b8:	e2 c0       	rjmp	.+452    	; 0x147e <DIO_voidSetPinValue+0x20e>
        {
            case DIO_LOW :    switch(Copy_u8PortNumber)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3f 83       	std	Y+7, r19	; 0x07
    12c2:	2e 83       	std	Y+6, r18	; 0x06
    12c4:	8e 81       	ldd	r24, Y+6	; 0x06
    12c6:	9f 81       	ldd	r25, Y+7	; 0x07
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	59 f1       	breq	.+86     	; 0x1324 <DIO_voidSetPinValue+0xb4>
    12ce:	2e 81       	ldd	r18, Y+6	; 0x06
    12d0:	3f 81       	ldd	r19, Y+7	; 0x07
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <DIO_voidSetPinValue+0x72>
    12d8:	8e 81       	ldd	r24, Y+6	; 0x06
    12da:	9f 81       	ldd	r25, Y+7	; 0x07
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	69 f0       	breq	.+26     	; 0x12fa <DIO_voidSetPinValue+0x8a>
    12e0:	ce c0       	rjmp	.+412    	; 0x147e <DIO_voidSetPinValue+0x20e>
    12e2:	2e 81       	ldd	r18, Y+6	; 0x06
    12e4:	3f 81       	ldd	r19, Y+7	; 0x07
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	89 f1       	breq	.+98     	; 0x134e <DIO_voidSetPinValue+0xde>
    12ec:	8e 81       	ldd	r24, Y+6	; 0x06
    12ee:	9f 81       	ldd	r25, Y+7	; 0x07
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <DIO_voidSetPinValue+0x88>
    12f6:	40 c0       	rjmp	.+128    	; 0x1378 <DIO_voidSetPinValue+0x108>
    12f8:	c2 c0       	rjmp	.+388    	; 0x147e <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
    12fa:	ab e3       	ldi	r26, 0x3B	; 59
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_voidSetPinValue+0xa8>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_voidSetPinValue+0xa4>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	ad c0       	rjmp	.+346    	; 0x147e <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    CLR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
    1324:	a8 e3       	ldi	r26, 0x38	; 56
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e8 e3       	ldi	r30, 0x38	; 56
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_voidSetPinValue+0xd2>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_voidSetPinValue+0xce>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	98 c0       	rjmp	.+304    	; 0x147e <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    CLR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
    134e:	a5 e3       	ldi	r26, 0x35	; 53
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_voidSetPinValue+0xfc>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_voidSetPinValue+0xf8>
    1370:	80 95       	com	r24
    1372:	84 23       	and	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	83 c0       	rjmp	.+262    	; 0x147e <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    CLR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
    1378:	a2 e3       	ldi	r26, 0x32	; 50
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_voidSetPinValue+0x126>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_voidSetPinValue+0x122>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	6e c0       	rjmp	.+220    	; 0x147e <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case DIO_HIGH :   switch(Copy_u8PortNumber)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	49 f1       	breq	.+82     	; 0x1408 <DIO_voidSetPinValue+0x198>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_voidSetPinValue+0x15a>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <DIO_voidSetPinValue+0x170>
    13c8:	5a c0       	rjmp	.+180    	; 0x147e <DIO_voidSetPinValue+0x20e>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	71 f1       	breq	.+92     	; 0x1430 <DIO_voidSetPinValue+0x1c0>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	e9 f1       	breq	.+122    	; 0x1458 <DIO_voidSetPinValue+0x1e8>
    13de:	4f c0       	rjmp	.+158    	; 0x147e <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_voidSetPinValue+0x18e>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_voidSetPinValue+0x18a>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	3b c0       	rjmp	.+118    	; 0x147e <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    1408:	a8 e3       	ldi	r26, 0x38	; 56
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e3       	ldi	r30, 0x38	; 56
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_voidSetPinValue+0x1b6>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_voidSetPinValue+0x1b2>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	27 c0       	rjmp	.+78     	; 0x147e <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    1430:	a5 e3       	ldi	r26, 0x35	; 53
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e5 e3       	ldi	r30, 0x35	; 53
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_voidSetPinValue+0x1de>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_voidSetPinValue+0x1da>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	13 c0       	rjmp	.+38     	; 0x147e <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_voidSetPinValue+0x206>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_voidSetPinValue+0x202>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    147e:	29 96       	adiw	r28, 0x09	; 9
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_voidSetPortValue+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <DIO_voidSetPortValue+0x8>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	90 f5       	brcc	.+100    	; 0x150a <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3c 83       	std	Y+4, r19	; 0x04
    14ae:	2b 83       	std	Y+3, r18	; 0x03
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	d1 f0       	breq	.+52     	; 0x14ee <DIO_voidSetPortValue+0x5e>
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	3c 81       	ldd	r19, Y+4	; 0x04
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <DIO_voidSetPortValue+0x3e>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <DIO_voidSetPortValue+0x54>
    14cc:	1e c0       	rjmp	.+60     	; 0x150a <DIO_voidSetPortValue+0x7a>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <DIO_voidSetPortValue+0x68>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <DIO_voidSetPortValue+0x72>
    14e2:	13 c0       	rjmp	.+38     	; 0x150a <DIO_voidSetPortValue+0x7a>
        {
            case DIO_PORTA: PORTA_REG = Copy_u8Value;
    14e4:	eb e3       	ldi	r30, 0x3B	; 59
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	80 83       	st	Z, r24
    14ec:	0e c0       	rjmp	.+28     	; 0x150a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTB: PORTB_REG = Copy_u8Value;
    14ee:	e8 e3       	ldi	r30, 0x38	; 56
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24
    14f6:	09 c0       	rjmp	.+18     	; 0x150a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTC: PORTC_REG = Copy_u8Value;
    14f8:	e5 e3       	ldi	r30, 0x35	; 53
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	04 c0       	rjmp	.+8      	; 0x150a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTD: PORTD_REG = Copy_u8Value;
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <DIO_u8GetPinValue+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <DIO_u8GetPinValue+0x8>
    1520:	0f 92       	push	r0
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	8a 83       	std	Y+2, r24	; 0x02
    1528:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	08 f0       	brcs	.+2      	; 0x1532 <DIO_u8GetPinValue+0x1a>
    1530:	9d c0       	rjmp	.+314    	; 0x166c <DIO_u8GetPinValue+0x154>
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 30       	cpi	r24, 0x08	; 8
    1536:	08 f0       	brcs	.+2      	; 0x153a <DIO_u8GetPinValue+0x22>
    1538:	99 c0       	rjmp	.+306    	; 0x166c <DIO_u8GetPinValue+0x154>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 83       	std	Y+5, r19	; 0x05
    1542:	2c 83       	std	Y+4, r18	; 0x04
    1544:	4c 81       	ldd	r20, Y+4	; 0x04
    1546:	5d 81       	ldd	r21, Y+5	; 0x05
    1548:	41 30       	cpi	r20, 0x01	; 1
    154a:	51 05       	cpc	r21, r1
    154c:	b1 f1       	breq	.+108    	; 0x15ba <DIO_u8GetPinValue+0xa2>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	91 05       	cpc	r25, r1
    1556:	34 f4       	brge	.+12     	; 0x1564 <DIO_u8GetPinValue+0x4c>
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	21 15       	cp	r18, r1
    155e:	31 05       	cpc	r19, r1
    1560:	71 f0       	breq	.+28     	; 0x157e <DIO_u8GetPinValue+0x66>
    1562:	84 c0       	rjmp	.+264    	; 0x166c <DIO_u8GetPinValue+0x154>
    1564:	4c 81       	ldd	r20, Y+4	; 0x04
    1566:	5d 81       	ldd	r21, Y+5	; 0x05
    1568:	42 30       	cpi	r20, 0x02	; 2
    156a:	51 05       	cpc	r21, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <DIO_u8GetPinValue+0x58>
    156e:	43 c0       	rjmp	.+134    	; 0x15f6 <DIO_u8GetPinValue+0xde>
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <DIO_u8GetPinValue+0x64>
    157a:	5b c0       	rjmp	.+182    	; 0x1632 <DIO_u8GetPinValue+0x11a>
    157c:	77 c0       	rjmp	.+238    	; 0x166c <DIO_u8GetPinValue+0x154>
        {
            case DIO_PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    157e:	e9 e3       	ldi	r30, 0x39	; 57
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8GetPinValue+0x80>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	2a 95       	dec	r18
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8GetPinValue+0x7c>
    159c:	9a 01       	movw	r18, r20
    159e:	28 23       	and	r18, r24
    15a0:	39 23       	and	r19, r25
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_u8GetPinValue+0x98>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_u8GetPinValue+0x94>
    15b4:	ca 01       	movw	r24, r20
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	59 c0       	rjmp	.+178    	; 0x166c <DIO_u8GetPinValue+0x154>
            case DIO_PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    15ba:	e6 e3       	ldi	r30, 0x36	; 54
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_u8GetPinValue+0xbc>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_u8GetPinValue+0xb8>
    15d8:	9a 01       	movw	r18, r20
    15da:	28 23       	and	r18, r24
    15dc:	39 23       	and	r19, r25
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8GetPinValue+0xd4>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8GetPinValue+0xd0>
    15f0:	ca 01       	movw	r24, r20
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	3b c0       	rjmp	.+118    	; 0x166c <DIO_u8GetPinValue+0x154>
            case DIO_PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    15f6:	e3 e3       	ldi	r30, 0x33	; 51
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_u8GetPinValue+0xf8>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	2a 95       	dec	r18
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_u8GetPinValue+0xf4>
    1614:	9a 01       	movw	r18, r20
    1616:	28 23       	and	r18, r24
    1618:	39 23       	and	r19, r25
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a9 01       	movw	r20, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_u8GetPinValue+0x110>
    1624:	55 95       	asr	r21
    1626:	47 95       	ror	r20
    1628:	8a 95       	dec	r24
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_u8GetPinValue+0x10c>
    162c:	ca 01       	movw	r24, r20
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	1d c0       	rjmp	.+58     	; 0x166c <DIO_u8GetPinValue+0x154>
            case DIO_PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    1632:	e0 e3       	ldi	r30, 0x30	; 48
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8GetPinValue+0x134>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	2a 95       	dec	r18
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_u8GetPinValue+0x130>
    1650:	9a 01       	movw	r18, r20
    1652:	28 23       	and	r18, r24
    1654:	39 23       	and	r19, r25
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a9 01       	movw	r20, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_u8GetPinValue+0x14c>
    1660:	55 95       	asr	r21
    1662:	47 95       	ror	r20
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_u8GetPinValue+0x148>
    1668:	ca 01       	movw	r24, r20
    166a:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <DIO_u8GetPortValue+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <DIO_u8GetPortValue+0x8>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	84 30       	cpi	r24, 0x04	; 4
    1690:	90 f5       	brcc	.+100    	; 0x16f6 <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3c 83       	std	Y+4, r19	; 0x04
    169a:	2b 83       	std	Y+3, r18	; 0x03
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	91 05       	cpc	r25, r1
    16a4:	d1 f0       	breq	.+52     	; 0x16da <DIO_u8GetPortValue+0x5c>
    16a6:	2b 81       	ldd	r18, Y+3	; 0x03
    16a8:	3c 81       	ldd	r19, Y+4	; 0x04
    16aa:	22 30       	cpi	r18, 0x02	; 2
    16ac:	31 05       	cpc	r19, r1
    16ae:	2c f4       	brge	.+10     	; 0x16ba <DIO_u8GetPortValue+0x3c>
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <DIO_u8GetPortValue+0x52>
    16b8:	1e c0       	rjmp	.+60     	; 0x16f6 <DIO_u8GetPortValue+0x78>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	81 f0       	breq	.+32     	; 0x16e4 <DIO_u8GetPortValue+0x66>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	83 30       	cpi	r24, 0x03	; 3
    16ca:	91 05       	cpc	r25, r1
    16cc:	81 f0       	breq	.+32     	; 0x16ee <DIO_u8GetPortValue+0x70>
    16ce:	13 c0       	rjmp	.+38     	; 0x16f6 <DIO_u8GetPortValue+0x78>
        {
            case DIO_PORTA :    Local_u8Variable = PINA_REG ;   break;  
    16d0:	e9 e3       	ldi	r30, 0x39	; 57
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <DIO_u8GetPortValue+0x78>
            case DIO_PORTB :    Local_u8Variable = PINB_REG ;   break;
    16da:	e6 e3       	ldi	r30, 0x36	; 54
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <DIO_u8GetPortValue+0x78>
            case DIO_PORTC :    Local_u8Variable = PINC_REG ;   break;
    16e4:	e3 e3       	ldi	r30, 0x33	; 51
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <DIO_u8GetPortValue+0x78>
            case DIO_PORTD :    Local_u8Variable = PIND_REG ;   break;
    16ee:	e0 e3       	ldi	r30, 0x30	; 48
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <DIO_voidTogglePinValue+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_voidTogglePinValue+0x8>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	08 f0       	brcs	.+2      	; 0x171e <DIO_voidTogglePinValue+0x18>
    171c:	72 c0       	rjmp	.+228    	; 0x1802 <DIO_voidTogglePinValue+0xfc>
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 30       	cpi	r24, 0x08	; 8
    1722:	08 f0       	brcs	.+2      	; 0x1726 <DIO_voidTogglePinValue+0x20>
    1724:	6e c0       	rjmp	.+220    	; 0x1802 <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3c 83       	std	Y+4, r19	; 0x04
    172e:	2b 83       	std	Y+3, r18	; 0x03
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	49 f1       	breq	.+82     	; 0x178c <DIO_voidTogglePinValue+0x86>
    173a:	2b 81       	ldd	r18, Y+3	; 0x03
    173c:	3c 81       	ldd	r19, Y+4	; 0x04
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	2c f4       	brge	.+10     	; 0x174e <DIO_voidTogglePinValue+0x48>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	61 f0       	breq	.+24     	; 0x1764 <DIO_voidTogglePinValue+0x5e>
    174c:	5a c0       	rjmp	.+180    	; 0x1802 <DIO_voidTogglePinValue+0xfc>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	71 f1       	breq	.+92     	; 0x17b4 <DIO_voidTogglePinValue+0xae>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	91 05       	cpc	r25, r1
    1760:	e9 f1       	breq	.+122    	; 0x17dc <DIO_voidTogglePinValue+0xd6>
    1762:	4f c0       	rjmp	.+158    	; 0x1802 <DIO_voidTogglePinValue+0xfc>
        {
            case DIO_PORTA :    TOG_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    1764:	ab e3       	ldi	r26, 0x3B	; 59
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e3       	ldi	r30, 0x3B	; 59
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_voidTogglePinValue+0x7c>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <DIO_voidTogglePinValue+0x78>
    1786:	84 27       	eor	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	3b c0       	rjmp	.+118    	; 0x1802 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTB :    TOG_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    178c:	a8 e3       	ldi	r26, 0x38	; 56
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e8 e3       	ldi	r30, 0x38	; 56
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_voidTogglePinValue+0xa4>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_voidTogglePinValue+0xa0>
    17ae:	84 27       	eor	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	27 c0       	rjmp	.+78     	; 0x1802 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTC :    TOG_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    17b4:	a5 e3       	ldi	r26, 0x35	; 53
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e3       	ldi	r30, 0x35	; 53
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_voidTogglePinValue+0xcc>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_voidTogglePinValue+0xc8>
    17d6:	84 27       	eor	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	13 c0       	rjmp	.+38     	; 0x1802 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTD :    TOG_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_voidTogglePinValue+0xf4>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_voidTogglePinValue+0xf0>
    17fe:	84 27       	eor	r24, r20
    1800:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DIO_voidTogglePortValue>:


void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_voidTogglePortValue+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	08 f0       	brcs	.+2      	; 0x1826 <DIO_voidTogglePortValue+0x16>
    1824:	3e c0       	rjmp	.+124    	; 0x18a2 <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3b 83       	std	Y+3, r19	; 0x03
    182e:	2a 83       	std	Y+2, r18	; 0x02
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	e9 f0       	breq	.+58     	; 0x1874 <DIO_voidTogglePortValue+0x64>
    183a:	2a 81       	ldd	r18, Y+2	; 0x02
    183c:	3b 81       	ldd	r19, Y+3	; 0x03
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	2c f4       	brge	.+10     	; 0x184e <DIO_voidTogglePortValue+0x3e>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 f0       	breq	.+24     	; 0x1864 <DIO_voidTogglePortValue+0x54>
    184c:	2a c0       	rjmp	.+84     	; 0x18a2 <DIO_voidTogglePortValue+0x92>
    184e:	2a 81       	ldd	r18, Y+2	; 0x02
    1850:	3b 81       	ldd	r19, Y+3	; 0x03
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	b1 f0       	breq	.+44     	; 0x1884 <DIO_voidTogglePortValue+0x74>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	c9 f0       	breq	.+50     	; 0x1894 <DIO_voidTogglePortValue+0x84>
    1862:	1f c0       	rjmp	.+62     	; 0x18a2 <DIO_voidTogglePortValue+0x92>
        {
            case DIO_PORTA :    PORTA_REG ^= 0xff ;     break;           
    1864:	ab e3       	ldi	r26, 0x3B	; 59
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	eb e3       	ldi	r30, 0x3B	; 59
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 95       	com	r24
    1870:	8c 93       	st	X, r24
    1872:	17 c0       	rjmp	.+46     	; 0x18a2 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTB :    PORTB_REG ^= 0xff ;     break;          
    1874:	a8 e3       	ldi	r26, 0x38	; 56
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e8 e3       	ldi	r30, 0x38	; 56
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 95       	com	r24
    1880:	8c 93       	st	X, r24
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTC :    PORTC_REG ^= 0xff ;     break; 
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e3       	ldi	r30, 0x35	; 53
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 95       	com	r24
    1890:	8c 93       	st	X, r24
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTD :    PORTD_REG ^= 0xff ;     break; 
    1894:	a2 e3       	ldi	r26, 0x32	; 50
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 95       	com	r24
    18a0:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <DIO_voidConfig_Pull_Up_Pin>:

void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <DIO_voidConfig_Pull_Up_Pin+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <DIO_voidConfig_Pull_Up_Pin+0x8>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	6a 83       	std	Y+2, r22	; 0x02
    18c0:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	e0 f4       	brcc	.+56     	; 0x1900 <DIO_voidConfig_Pull_Up_Pin+0x52>
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	88 30       	cpi	r24, 0x08	; 8
    18cc:	c8 f4       	brcc	.+50     	; 0x1900 <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	3d 83       	std	Y+5, r19	; 0x05
    18d6:	2c 83       	std	Y+4, r18	; 0x04
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	59 f0       	breq	.+22     	; 0x18f6 <DIO_voidConfig_Pull_Up_Pin+0x48>
    18e0:	2c 81       	ldd	r18, Y+4	; 0x04
    18e2:	3d 81       	ldd	r19, Y+5	; 0x05
    18e4:	21 30       	cpi	r18, 0x01	; 1
    18e6:	31 05       	cpc	r19, r1
    18e8:	59 f4       	brne	.+22     	; 0x1900 <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case DIO_ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_HIGH );   break;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	6a 81       	ldd	r22, Y+2	; 0x02
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <DIO_voidConfig_Pull_Up_Pin+0x52>
            case DIO_OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_LOW  );   break;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	6a 81       	ldd	r22, Y+2	; 0x02
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
            default  :                                                                      break;
       }
    }
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <DIO_voidConfig_Pull_Up_Port>:

void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <DIO_voidConfig_Pull_Up_Port+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <DIO_voidConfig_Pull_Up_Port+0x8>
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	84 30       	cpi	r24, 0x04	; 4
    1924:	b8 f4       	brcc	.+46     	; 0x1954 <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3c 83       	std	Y+4, r19	; 0x04
    192e:	2b 83       	std	Y+3, r18	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	51 f0       	breq	.+20     	; 0x194c <DIO_voidConfig_Pull_Up_Port+0x3c>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	21 30       	cpi	r18, 0x01	; 1
    193e:	31 05       	cpc	r19, r1
    1940:	49 f4       	brne	.+18     	; 0x1954 <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case DIO_ON :  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_HIGH );  break;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	61 e0       	ldi	r22, 0x01	; 1
    1946:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_voidSetPortValue>
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <DIO_voidConfig_Pull_Up_Port+0x44>
            case DIO_OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_LOW );   break;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <SERVO_voidRotateSpecificAngle_OC1A>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../MCAL/TIMERS/TIMER1/TIMER1_Interface.h"


void SERVO_voidRotateSpecificAngle_OC1A ( u16 Copy_u16Angle )
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <SERVO_voidRotateSpecificAngle_OC1A+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <SERVO_voidRotateSpecificAngle_OC1A+0x8>
    196a:	00 d0       	rcall	.+0      	; 0x196c <SERVO_voidRotateSpecificAngle_OC1A+0xa>
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	65 e0       	ldi	r22, 0x05	; 5
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	cc 01       	movw	r24, r24
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	28 ee       	ldi	r18, 0xE8	; 232
    198a:	33 e0       	ldi	r19, 0x03	; 3
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 42 14 	call	0x2884	; 0x2884 <__mulsi3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	84 59       	subi	r24, 0x94	; 148
    199e:	91 44       	sbci	r25, 0x41	; 65
    19a0:	ad 4f       	sbci	r26, 0xFD	; 253
    19a2:	bf 4f       	sbci	r27, 0xFF	; 255
    19a4:	24 eb       	ldi	r18, 0xB4	; 180
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodsi4>
    19b4:	da 01       	movw	r26, r20
    19b6:	c9 01       	movw	r24, r18
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	ab 83       	std	Y+3, r26	; 0x03
    19be:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_void_u16PWM_T1A ( Local_u32Variable ,19999);
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	6f e1       	ldi	r22, 0x1F	; 31
    19c6:	7e e4       	ldi	r23, 0x4E	; 78
    19c8:	0e 94 70 06 	call	0xce0	; 0xce0 <TIMER1_void_u16PWM_T1A>
}
    19cc:	26 96       	adiw	r28, 0x06	; 6
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <SERVO_voidRotateSpecificAngle_OC1B>:



void SERVO_voidRotateSpecificAngle_OC1B ( u16 Copy_u16Angle )
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <SERVO_voidRotateSpecificAngle_OC1B+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <SERVO_voidRotateSpecificAngle_OC1B+0x8>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <SERVO_voidRotateSpecificAngle_OC1B+0xa>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	64 e0       	ldi	r22, 0x04	; 4
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	cc 01       	movw	r24, r24
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	28 ee       	ldi	r18, 0xE8	; 232
    1a06:	33 e0       	ldi	r19, 0x03	; 3
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 42 14 	call	0x2884	; 0x2884 <__mulsi3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	84 59       	subi	r24, 0x94	; 148
    1a1a:	91 44       	sbci	r25, 0x41	; 65
    1a1c:	ad 4f       	sbci	r26, 0xFD	; 253
    1a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a20:	24 eb       	ldi	r18, 0xB4	; 180
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodsi4>
    1a30:	da 01       	movw	r26, r20
    1a32:	c9 01       	movw	r24, r18
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	ab 83       	std	Y+3, r26	; 0x03
    1a3a:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_void_u16PWM_T1B ( Local_u32Variable ,19999);
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	6f e1       	ldi	r22, 0x1F	; 31
    1a42:	7e e4       	ldi	r23, 0x4E	; 78
    1a44:	0e 94 8b 06 	call	0xd16	; 0xd16 <TIMER1_void_u16PWM_T1B>
}
    1a48:	26 96       	adiw	r28, 0x06	; 6
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_voidInit (void)
{
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	c6 54       	subi	r28, 0x46	; 70
    1a68:	d0 40       	sbci	r29, 0x00	; 0
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , DIO_OUTPUT);
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,DIO_OUTPUT);
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,DIO_OUTPUT);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,DIO_OUTPUT);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ed 5b       	subi	r30, 0xBD	; 189
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	ac e0       	ldi	r26, 0x0C	; 12
    1aa6:	b2 e4       	ldi	r27, 0x42	; 66
    1aa8:	80 83       	st	Z, r24
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	a2 83       	std	Z+2, r26	; 0x02
    1aae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	01 5c       	subi	r16, 0xC1	; 193
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ed 5b       	subi	r30, 0xBD	; 189
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4a ef       	ldi	r20, 0xFA	; 250
    1aca:	54 e4       	ldi	r21, 0x44	; 68
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	80 83       	st	Z, r24
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	a2 83       	std	Z+2, r26	; 0x02
    1adc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ff 96       	adiw	r30, 0x3f	; 63
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <LCD_voidInit+0xaa>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9e af       	std	Y+62, r25	; 0x3e
    1b00:	8d af       	std	Y+61, r24	; 0x3d
    1b02:	46 c0       	rjmp	.+140    	; 0x1b90 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    1b04:	fe 01       	movw	r30, r28
    1b06:	ff 96       	adiw	r30, 0x3f	; 63
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	64 f5       	brge	.+88     	; 0x1b78 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	fe 01       	movw	r30, r28
    1b22:	ed 5b       	subi	r30, 0xBD	; 189
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e af       	std	Y+62, r25	; 0x3e
    1b4c:	8d af       	std	Y+61, r24	; 0x3d
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <LCD_voidInit+0x114>
    1b50:	88 ec       	ldi	r24, 0xC8	; 200
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c af       	std	Y+60, r25	; 0x3c
    1b56:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b58:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b5a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_voidInit+0x102>
    1b60:	9c af       	std	Y+60, r25	; 0x3c
    1b62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e af       	std	Y+62, r25	; 0x3e
    1b6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <LCD_voidInit+0xf6>
    1b76:	16 c0       	rjmp	.+44     	; 0x1ba4 <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ff 96       	adiw	r30, 0x3f	; 63
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9e af       	std	Y+62, r25	; 0x3e
    1b8e:	8d af       	std	Y+61, r24	; 0x3d
    1b90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b94:	9a af       	std	Y+58, r25	; 0x3a
    1b96:	89 af       	std	Y+57, r24	; 0x39
    1b98:	89 ad       	ldd	r24, Y+57	; 0x39
    1b9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_voidInit+0x142>
    1ba0:	9a af       	std	Y+58, r25	; 0x3a
    1ba2:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);    //TIMER0_voidSetBusyWait_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x7 );
    1ba4:	88 e3       	ldi	r24, 0x38	; 56
    1ba6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a0 e8       	ldi	r26, 0x80	; 128
    1bb0:	bf e3       	ldi	r27, 0x3F	; 63
    1bb2:	8d ab       	std	Y+53, r24	; 0x35
    1bb4:	9e ab       	std	Y+54, r25	; 0x36
    1bb6:	af ab       	std	Y+55, r26	; 0x37
    1bb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	6d a9       	ldd	r22, Y+53	; 0x35
    1bbc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bbe:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a ef       	ldi	r20, 0xFA	; 250
    1bc8:	54 e4       	ldi	r21, 0x44	; 68
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	89 ab       	std	Y+49, r24	; 0x31
    1bd4:	9a ab       	std	Y+50, r25	; 0x32
    1bd6:	ab ab       	std	Y+51, r26	; 0x33
    1bd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <LCD_voidInit+0x1a2>
		__ticks = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    1bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1c00:	8b a9       	ldd	r24, Y+51	; 0x33
    1c02:	9c a9       	ldd	r25, Y+52	; 0x34
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	57 e4       	ldi	r21, 0x47	; 71
    1c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	4c f5       	brge	.+82     	; 0x1c66 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	6d a9       	ldd	r22, Y+53	; 0x35
    1c16:	7e a9       	ldd	r23, Y+54	; 0x36
    1c18:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e2       	ldi	r20, 0x20	; 32
    1c22:	51 e4       	ldi	r21, 0x41	; 65
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <LCD_voidInit+0x202>
    1c3e:	88 ec       	ldi	r24, 0xC8	; 200
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9e a7       	std	Y+46, r25	; 0x2e
    1c44:	8d a7       	std	Y+45, r24	; 0x2d
    1c46:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c48:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_voidInit+0x1f0>
    1c4e:	9e a7       	std	Y+46, r25	; 0x2e
    1c50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c54:	98 a9       	ldd	r25, Y+48	; 0x30
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	98 ab       	std	Y+48, r25	; 0x30
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <LCD_voidInit+0x1e4>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	69 a9       	ldd	r22, Y+49	; 0x31
    1c68:	7a a9       	ldd	r23, Y+50	; 0x32
    1c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	98 ab       	std	Y+48, r25	; 0x30
    1c78:	8f a7       	std	Y+47, r24	; 0x2f
    1c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7e:	9c a7       	std	Y+44, r25	; 0x2c
    1c80:	8b a7       	std	Y+43, r24	; 0x2b
    1c82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c84:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_voidInit+0x22c>
    1c8a:	9c a7       	std	Y+44, r25	; 0x2c
    1c8c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);     // TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    1c8e:	8c e0       	ldi	r24, 0x0C	; 12
    1c90:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e8       	ldi	r26, 0x80	; 128
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	8f a3       	std	Y+39, r24	; 0x27
    1c9e:	98 a7       	std	Y+40, r25	; 0x28
    1ca0:	a9 a7       	std	Y+41, r26	; 0x29
    1ca2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    1caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8b a3       	std	Y+35, r24	; 0x23
    1cbe:	9c a3       	std	Y+36, r25	; 0x24
    1cc0:	ad a3       	std	Y+37, r26	; 0x25
    1cc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cca:	9e a1       	ldd	r25, Y+38	; 0x26
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <LCD_voidInit+0x28c>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9a a3       	std	Y+34, r25	; 0x22
    1ce2:	89 a3       	std	Y+33, r24	; 0x21
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    1ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1d00:	78 a5       	ldd	r23, Y+40	; 0x28
    1d02:	89 a5       	ldd	r24, Y+41	; 0x29
    1d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9a a3       	std	Y+34, r25	; 0x22
    1d24:	89 a3       	std	Y+33, r24	; 0x21
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <LCD_voidInit+0x2ec>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	98 a3       	std	Y+32, r25	; 0x20
    1d2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d32:	98 a1       	ldd	r25, Y+32	; 0x20
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_voidInit+0x2da>
    1d38:	98 a3       	std	Y+32, r25	; 0x20
    1d3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <LCD_voidInit+0x2ce>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6b a1       	ldd	r22, Y+35	; 0x23
    1d52:	7c a1       	ldd	r23, Y+36	; 0x24
    1d54:	8d a1       	ldd	r24, Y+37	; 0x25
    1d56:	9e a1       	ldd	r25, Y+38	; 0x26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9a a3       	std	Y+34, r25	; 0x22
    1d62:	89 a3       	std	Y+33, r24	; 0x21
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_voidInit+0x316>
    1d74:	9e 8f       	std	Y+30, r25	; 0x1e
    1d76:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e0       	ldi	r26, 0x00	; 0
    1d84:	b0 e4       	ldi	r27, 0x40	; 64
    1d86:	89 8f       	std	Y+25, r24	; 0x19
    1d88:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a ef       	ldi	r20, 0xFA	; 250
    1d9c:	54 e4       	ldi	r21, 0x44	; 68
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8d 8b       	std	Y+21, r24	; 0x15
    1da8:	9e 8b       	std	Y+22, r25	; 0x16
    1daa:	af 8b       	std	Y+23, r26	; 0x17
    1dac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <LCD_voidInit+0x376>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    1dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9c 8b       	std	Y+20, r25	; 0x14
    1e0e:	8b 8b       	std	Y+19, r24	; 0x13
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <LCD_voidInit+0x3d6>
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	89 8b       	std	Y+17, r24	; 0x11
    1e1a:	89 89       	ldd	r24, Y+17	; 0x11
    1e1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_voidInit+0x3c4>
    1e22:	9a 8b       	std	Y+18, r25	; 0x12
    1e24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9c 8b       	std	Y+20, r25	; 0x14
    1e2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8b 89       	ldd	r24, Y+19	; 0x13
    1e32:	9c 89       	ldd	r25, Y+20	; 0x14
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <LCD_voidInit+0x3b8>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e40:	98 8d       	ldd	r25, Y+24	; 0x18
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9c 8b       	std	Y+20, r25	; 0x14
    1e4c:	8b 8b       	std	Y+19, r24	; 0x13
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	98 8b       	std	Y+16, r25	; 0x10
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	98 89       	ldd	r25, Y+16	; 0x10
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_voidInit+0x400>
    1e5e:	98 8b       	std	Y+16, r25	; 0x10
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);     //TIMER0_voidSetBusyWait_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    1e62:	86 e0       	ldi	r24, 0x06	; 6
    1e64:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e8       	ldi	r26, 0x80	; 128
    1e6e:	bf e3       	ldi	r27, 0x3F	; 63
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_voidInit+0x460>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_voidInit+0x4c0>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_voidInit+0x4ae>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_voidInit+0x4a2>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_voidInit+0x4ea>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);


}
    1f4c:	ca 5b       	subi	r28, 0xBA	; 186
    1f4e:	df 4f       	sbci	r29, 0xFF	; 255
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	08 95       	ret

00001f64 <LCD_voidWriteCommand>:


void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	2f 97       	sbiw	r28, 0x0f	; 15
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_LOW);
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	61 e0       	ldi	r22, 0x01	; 1
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f92:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	62 e0       	ldi	r22, 0x02	; 2
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e4       	ldi	r27, 0x40	; 64
    1fa8:	8b 87       	std	Y+11, r24	; 0x0b
    1faa:	9c 87       	std	Y+12, r25	; 0x0c
    1fac:	ad 87       	std	Y+13, r26	; 0x0d
    1fae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a ef       	ldi	r20, 0xFA	; 250
    1fbe:	54 e4       	ldi	r21, 0x44	; 68
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8f 83       	std	Y+7, r24	; 0x07
    1fca:	98 87       	std	Y+8, r25	; 0x08
    1fcc:	a9 87       	std	Y+9, r26	; 0x09
    1fce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6b 85       	ldd	r22, Y+11	; 0x0b
    200c:	7c 85       	ldd	r23, Y+12	; 0x0c
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_voidWriteCommand+0xee>
    2034:	88 ec       	ldi	r24, 0xC8	; 200
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_voidWriteCommand+0xdc>
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <LCD_voidWriteCommand+0xd0>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_voidWriteCommand+0x118>
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
}
    208e:	2f 96       	adiw	r28, 0x0f	; 15
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <LCD_voidWriteChar>:


void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	2f 97       	sbiw	r28, 0x0f	; 15
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_HIGH);
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    20ce:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	62 e0       	ldi	r22, 0x02	; 2
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 e8       	ldi	r26, 0x80	; 128
    20e2:	bf e3       	ldi	r27, 0x3F	; 63
    20e4:	8b 87       	std	Y+11, r24	; 0x0b
    20e6:	9c 87       	std	Y+12, r25	; 0x0c
    20e8:	ad 87       	std	Y+13, r26	; 0x0d
    20ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a ef       	ldi	r20, 0xFA	; 250
    20fa:	54 e4       	ldi	r21, 0x44	; 68
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8f 83       	std	Y+7, r24	; 0x07
    2106:	98 87       	std	Y+8, r25	; 0x08
    2108:	a9 87       	std	Y+9, r26	; 0x09
    210a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <LCD_voidWriteChar+0x8e>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <LCD_voidWriteChar+0x10c>
	else if (__tmp > 65535)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <LCD_voidWriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6b 85       	ldd	r22, Y+11	; 0x0b
    2148:	7c 85       	ldd	r23, Y+12	; 0x0c
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
    216e:	0f c0       	rjmp	.+30     	; 0x218e <LCD_voidWriteChar+0xee>
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_voidWriteChar+0xdc>
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <LCD_voidWriteChar+0xd0>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <LCD_voidWriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_voidWriteChar+0x118>
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	62 e0       	ldi	r22, 0x02	; 2
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
}
    21ca:	2f 96       	adiw	r28, 0x0f	; 15
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <LCD_voidWriteString>:



void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <LCD_voidWriteString+0x6>
    21e2:	0f 92       	push	r0
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	9b 83       	std	Y+3, r25	; 0x03
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    21ec:	19 82       	std	Y+1, r1	; 0x01
    21ee:	1d c0       	rjmp	.+58     	; 0x222a <LCD_voidWriteString+0x4e>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	9b 81       	ldd	r25, Y+3	; 0x03
    21fa:	fc 01       	movw	r30, r24
    21fc:	e2 0f       	add	r30, r18
    21fe:	f3 1f       	adc	r31, r19
    2200:	80 81       	ld	r24, Z
    2202:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_voidWriteChar>
        i++;
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	8f 5f       	subi	r24, 0xFF	; 255
    220a:	89 83       	std	Y+1, r24	; 0x01
        if(i==16)
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	80 31       	cpi	r24, 0x10	; 16
    2210:	29 f4       	brne	.+10     	; 0x221c <LCD_voidWriteString+0x40>
        {
        	LCD_voidGoTo_XY(1,0);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
    221a:	07 c0       	rjmp	.+14     	; 0x222a <LCD_voidWriteString+0x4e>
        }
        else if(i==32)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	80 32       	cpi	r24, 0x20	; 32
    2220:	21 f4       	brne	.+8      	; 0x222a <LCD_voidWriteString+0x4e>
        {
        	LCD_voidGoTo_XY(0,0);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>


void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	fc 01       	movw	r30, r24
    2236:	e2 0f       	add	r30, r18
    2238:	f3 1f       	adc	r31, r19
    223a:	80 81       	ld	r24, Z
    223c:	88 23       	and	r24, r24
    223e:	c1 f6       	brne	.-80     	; 0x21f0 <LCD_voidWriteString+0x14>
        else if(i==32)
        {
        	LCD_voidGoTo_XY(0,0);
        }
    }
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <LCD_voidWrite_u32Number>:


void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	6b 97       	sbiw	r28, 0x1b	; 27
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	68 8f       	std	Y+24, r22	; 0x18
    2266:	79 8f       	std	Y+25, r23	; 0x19
    2268:	8a 8f       	std	Y+26, r24	; 0x1a
    226a:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ;
    u8 i=0 ;
    226c:	1b 82       	std	Y+3, r1	; 0x03
    226e:	2d c0       	rjmp	.+90     	; 0x22ca <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	08 2f       	mov	r16, r24
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	88 8d       	ldd	r24, Y+24	; 0x18
    2278:	99 8d       	ldd	r25, Y+25	; 0x19
    227a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    227c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    227e:	2a e0       	ldi	r18, 0x0A	; 10
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodsi4>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	28 2f       	mov	r18, r24
    2294:	ce 01       	movw	r24, r28
    2296:	04 96       	adiw	r24, 0x04	; 4
    2298:	fc 01       	movw	r30, r24
    229a:	e0 0f       	add	r30, r16
    229c:	f1 1f       	adc	r31, r17
    229e:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    22a0:	88 8d       	ldd	r24, Y+24	; 0x18
    22a2:	99 8d       	ldd	r25, Y+25	; 0x19
    22a4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    22a6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    22a8:	2a e0       	ldi	r18, 0x0A	; 10
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodsi4>
    22b8:	da 01       	movw	r26, r20
    22ba:	c9 01       	movw	r24, r18
    22bc:	88 8f       	std	Y+24, r24	; 0x18
    22be:	99 8f       	std	Y+25, r25	; 0x19
    22c0:	aa 8f       	std	Y+26, r26	; 0x1a
    22c2:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    22ca:	88 8d       	ldd	r24, Y+24	; 0x18
    22cc:	99 8d       	ldd	r25, Y+25	; 0x19
    22ce:	aa 8d       	ldd	r26, Y+26	; 0x1a
    22d0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	a1 05       	cpc	r26, r1
    22d6:	b1 05       	cpc	r27, r1
    22d8:	59 f6       	brne	.-106    	; 0x2270 <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	81 50       	subi	r24, 0x01	; 1
    22de:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	10 c0       	rjmp	.+32     	; 0x230c <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    22ec:	29 81       	ldd	r18, Y+1	; 0x01
    22ee:	3a 81       	ldd	r19, Y+2	; 0x02
    22f0:	ce 01       	movw	r24, r28
    22f2:	04 96       	adiw	r24, 0x04	; 4
    22f4:	fc 01       	movw	r30, r24
    22f6:	e2 0f       	add	r30, r18
    22f8:	f3 1f       	adc	r31, r19
    22fa:	80 81       	ld	r24, Z
    22fc:	80 5d       	subi	r24, 0xD0	; 208
    22fe:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_voidWriteChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a 81       	ldd	r25, Y+2	; 0x02
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	99 23       	and	r25, r25
    2312:	64 f7       	brge	.-40     	; 0x22ec <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    2314:	6b 96       	adiw	r28, 0x1b	; 27
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	08 95       	ret

0000232a <LCD_voidGoTo_XY>:


void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <LCD_voidGoTo_XY+0x6>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <LCD_voidGoTo_XY+0x8>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	d8 f4       	brcc	.+54     	; 0x2376 <LCD_voidGoTo_XY+0x4c>
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	80 31       	cpi	r24, 0x10	; 16
    2344:	c0 f4       	brcc	.+48     	; 0x2376 <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	3c 83       	std	Y+4, r19	; 0x04
    234e:	2b 83       	std	Y+3, r18	; 0x03
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	31 f0       	breq	.+12     	; 0x2364 <LCD_voidGoTo_XY+0x3a>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	21 30       	cpi	r18, 0x01	; 1
    235e:	31 05       	cpc	r19, r1
    2360:	31 f0       	breq	.+12     	; 0x236e <LCD_voidGoTo_XY+0x44>
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	80 58       	subi	r24, 0x80	; 128
    2368:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
    236c:	04 c0       	rjmp	.+8      	; 0x2376 <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	80 54       	subi	r24, 0x40	; 64
    2372:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_voidDrawPattern>:



void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <LCD_voidDrawPattern+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <LCD_voidDrawPattern+0x8>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	8a 83       	std	Y+2, r24	; 0x02
    2392:	7c 83       	std	Y+4, r23	; 0x04
    2394:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    239c:	19 82       	std	Y+1, r1	; 0x01
    239e:	0e c0       	rjmp	.+28     	; 0x23bc <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	fc 01       	movw	r30, r24
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	80 81       	ld	r24, Z
    23b2:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_voidWriteChar>

void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );

    for ( u8 i=0 ; i < 8 ; i++ )
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	88 30       	cpi	r24, 0x08	; 8
    23c0:	78 f3       	brcs	.-34     	; 0x23a0 <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_voidWritePattern>:




void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <LCD_voidWritePattern+0x6>
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	6a 83       	std	Y+2, r22	; 0x02
    23e0:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	6b 81       	ldd	r22, Y+3	; 0x03
    23e6:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_voidWriteChar>
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <LCD_voidClearDisplay>:




void LCD_voidClearDisplay (void)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
    LCD_voidGoTo_XY(0,0);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
}
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <LCD_voidShiftLeft>:




void LCD_voidShiftLeft (void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    2420:	87 e0       	ldi	r24, 0x07	; 7
    2422:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <LCD_voidShiftRight>:




void LCD_voidShiftRight (void)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    2434:	85 e0       	ldi	r24, 0x05	; 5
    2436:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_voidWriteCommand>
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <main>:


void StartProgram			 (void);

void main ()
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	af 97       	sbiw	r28, 0x2f	; 47
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPortDirection(DIO_PORTA,DIO_OUTPUT);
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
    245c:	83 e0       	ldi	r24, 0x03	; 3
    245e:	63 e0       	ldi	r22, 0x03	; 3
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_INPUT);
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	66 e0       	ldi	r22, 0x06	; 6
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_INPUT);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	67 e0       	ldi	r22, 0x07	; 7
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_voidSetPinDirection>

	TIMER1_voidInit ();
    247a:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER1_voidInit>
	LCD_voidInit();
    247e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidInit>
	StartProgram();
    2482:	0e 94 29 14 	call	0x2852	; 0x2852 <StartProgram>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	aa ef       	ldi	r26, 0xFA	; 250
    248c:	b3 e4       	ldi	r27, 0x43	; 67
    248e:	8f a3       	std	Y+39, r24	; 0x27
    2490:	98 a7       	std	Y+40, r25	; 0x28
    2492:	a9 a7       	std	Y+41, r26	; 0x29
    2494:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	6f a1       	ldd	r22, Y+39	; 0x27
    2498:	78 a5       	ldd	r23, Y+40	; 0x28
    249a:	89 a5       	ldd	r24, Y+41	; 0x29
    249c:	9a a5       	ldd	r25, Y+42	; 0x2a
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a ef       	ldi	r20, 0xFA	; 250
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8b a3       	std	Y+35, r24	; 0x23
    24b0:	9c a3       	std	Y+36, r25	; 0x24
    24b2:	ad a3       	std	Y+37, r26	; 0x25
    24b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b6:	6b a1       	ldd	r22, Y+35	; 0x23
    24b8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ba:	8d a1       	ldd	r24, Y+37	; 0x25
    24bc:	9e a1       	ldd	r25, Y+38	; 0x26
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <main+0x98>
		__ticks = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <main+0x116>
	else if (__tmp > 65535)
    24d8:	6b a1       	ldd	r22, Y+35	; 0x23
    24da:	7c a1       	ldd	r23, Y+36	; 0x24
    24dc:	8d a1       	ldd	r24, Y+37	; 0x25
    24de:	9e a1       	ldd	r25, Y+38	; 0x26
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	4c f5       	brge	.+82     	; 0x2542 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	6f a1       	ldd	r22, Y+39	; 0x27
    24f2:	78 a5       	ldd	r23, Y+40	; 0x28
    24f4:	89 a5       	ldd	r24, Y+41	; 0x29
    24f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9a a3       	std	Y+34, r25	; 0x22
    2516:	89 a3       	std	Y+33, r24	; 0x21
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <main+0xf8>
    251a:	88 ec       	ldi	r24, 0xC8	; 200
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	98 a3       	std	Y+32, r25	; 0x20
    2520:	8f 8f       	std	Y+31, r24	; 0x1f
    2522:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2524:	98 a1       	ldd	r25, Y+32	; 0x20
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <main+0xe6>
    252a:	98 a3       	std	Y+32, r25	; 0x20
    252c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	89 a1       	ldd	r24, Y+33	; 0x21
    2530:	9a a1       	ldd	r25, Y+34	; 0x22
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	89 a1       	ldd	r24, Y+33	; 0x21
    253a:	9a a1       	ldd	r25, Y+34	; 0x22
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	69 f7       	brne	.-38     	; 0x251a <main+0xda>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2542:	6b a1       	ldd	r22, Y+35	; 0x23
    2544:	7c a1       	ldd	r23, Y+36	; 0x24
    2546:	8d a1       	ldd	r24, Y+37	; 0x25
    2548:	9e a1       	ldd	r25, Y+38	; 0x26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9a a3       	std	Y+34, r25	; 0x22
    2554:	89 a3       	std	Y+33, r24	; 0x21
    2556:	89 a1       	ldd	r24, Y+33	; 0x21
    2558:	9a a1       	ldd	r25, Y+34	; 0x22
    255a:	9e 8f       	std	Y+30, r25	; 0x1e
    255c:	8d 8f       	std	Y+29, r24	; 0x1d
    255e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2560:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <main+0x122>
    2566:	9e 8f       	std	Y+30, r25	; 0x1e
    2568:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_voidClearDisplay();
    256a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_voidClearDisplay>
	LCD_voidGoTo_XY (0,0);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
	LCD_voidWriteString ("There are 0 cars");
    2576:	80 e6       	ldi	r24, 0x60	; 96
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
	LCD_voidWriteString ("garage has space");
    2586:	81 e7       	ldi	r24, 0x71	; 113
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>

	u8 flag1=0,flag2=0,IR1,IR2,counter=0;
    258e:	1f a6       	std	Y+47, r1	; 0x2f
    2590:	1e a6       	std	Y+46, r1	; 0x2e
    2592:	1b a6       	std	Y+43, r1	; 0x2b

	while (1)
	{
		IR1=DIO_u8GetPinValue(DIO_PORTD,DIO_PIN6);
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	66 e0       	ldi	r22, 0x06	; 6
    2598:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_u8GetPinValue>
    259c:	8d a7       	std	Y+45, r24	; 0x2d
		if(IR1==1 && flag1==0 && counter<4)
    259e:	8d a5       	ldd	r24, Y+45	; 0x2d
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <main+0x166>
    25a4:	a6 c0       	rjmp	.+332    	; 0x26f2 <main+0x2b2>
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	88 23       	and	r24, r24
    25aa:	09 f0       	breq	.+2      	; 0x25ae <main+0x16e>
    25ac:	a2 c0       	rjmp	.+324    	; 0x26f2 <main+0x2b2>
    25ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b0:	84 30       	cpi	r24, 0x04	; 4
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <main+0x176>
    25b4:	9e c0       	rjmp	.+316    	; 0x26f2 <main+0x2b2>
		{
			DIO_voidSetPinValue(DIO_PORTA,counter,DIO_HIGH);
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	6b a5       	ldd	r22, Y+43	; 0x2b
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
			counter++;
    25c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_voidGoTo_XY(0,10);
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	6a e0       	ldi	r22, 0x0A	; 10
    25ca:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
			LCD_voidWriteChar(counter+'0');
    25ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d0:	80 5d       	subi	r24, 0xD0	; 208
    25d2:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_voidWriteChar>
			flag1=1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	8f a7       	std	Y+47, r24	; 0x2f
			if(counter==4)
    25da:	8b a5       	ldd	r24, Y+43	; 0x2b
    25dc:	84 30       	cpi	r24, 0x04	; 4
    25de:	71 f4       	brne	.+28     	; 0x25fc <main+0x1bc>
			{
				LCD_voidClearDisplay();
    25e0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_voidClearDisplay>
				LCD_voidWriteString("there are 4 cars");
    25e4:	82 e8       	ldi	r24, 0x82	; 130
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>
				LCD_voidGoTo_XY(1,0);
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
				LCD_voidWriteString("garage  is full");
    25f4:	83 e9       	ldi	r24, 0x93	; 147
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>
			}
			SERVO_voidRotateSpecificAngle_OC1A(90);
    25fc:	8a e5       	ldi	r24, 0x5A	; 90
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 b1 0c 	call	0x1962	; 0x1962 <SERVO_voidRotateSpecificAngle_OC1A>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	aa ef       	ldi	r26, 0xFA	; 250
    260a:	b3 e4       	ldi	r27, 0x43	; 67
    260c:	89 8f       	std	Y+25, r24	; 0x19
    260e:	9a 8f       	std	Y+26, r25	; 0x1a
    2610:	ab 8f       	std	Y+27, r26	; 0x1b
    2612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a ef       	ldi	r20, 0xFA	; 250
    2622:	54 e4       	ldi	r21, 0x44	; 68
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8d 8b       	std	Y+21, r24	; 0x15
    262e:	9e 8b       	std	Y+22, r25	; 0x16
    2630:	af 8b       	std	Y+23, r26	; 0x17
    2632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <main+0x216>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <main+0x294>
	else if (__tmp > 65535)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <main+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	69 8d       	ldd	r22, Y+25	; 0x19
    2670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <main+0x276>
    2698:	88 ec       	ldi	r24, 0xC8	; 200
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	9a 89       	ldd	r25, Y+18	; 0x12
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <main+0x264>
    26a8:	9a 8b       	std	Y+18, r25	; 0x12
    26aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <main+0x258>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <main+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 89       	ldd	r25, Y+16	; 0x10
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <main+0x2a0>
    26e4:	98 8b       	std	Y+16, r25	; 0x10
    26e6:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(500);
			SERVO_voidRotateSpecificAngle_OC1A(0);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 b1 0c 	call	0x1962	; 0x1962 <SERVO_voidRotateSpecificAngle_OC1A>
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <main+0x2ba>
		}
		else if(IR1==0)
    26f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f4:	88 23       	and	r24, r24
    26f6:	09 f4       	brne	.+2      	; 0x26fa <main+0x2ba>
		{
			flag1=0;
    26f8:	1f a6       	std	Y+47, r1	; 0x2f
		}
		/*-----------------------------------------*/
		IR2=DIO_u8GetPinValue(DIO_PORTD,DIO_PIN7);
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	67 e0       	ldi	r22, 0x07	; 7
    26fe:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_u8GetPinValue>
    2702:	8c a7       	std	Y+44, r24	; 0x2c
		if(IR2==1 && flag2==0 && counter>0)
    2704:	8c a5       	ldd	r24, Y+44	; 0x2c
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	09 f0       	breq	.+2      	; 0x270c <main+0x2cc>
    270a:	9d c0       	rjmp	.+314    	; 0x2846 <main+0x406>
    270c:	8e a5       	ldd	r24, Y+46	; 0x2e
    270e:	88 23       	and	r24, r24
    2710:	09 f0       	breq	.+2      	; 0x2714 <main+0x2d4>
    2712:	99 c0       	rjmp	.+306    	; 0x2846 <main+0x406>
    2714:	8b a5       	ldd	r24, Y+43	; 0x2b
    2716:	88 23       	and	r24, r24
    2718:	09 f4       	brne	.+2      	; 0x271c <main+0x2dc>
    271a:	95 c0       	rjmp	.+298    	; 0x2846 <main+0x406>
		{
			counter--;
    271c:	8b a5       	ldd	r24, Y+43	; 0x2b
    271e:	81 50       	subi	r24, 0x01	; 1
    2720:	8b a7       	std	Y+43, r24	; 0x2b
			DIO_voidSetPinValue(DIO_PORTA,counter,DIO_LOW);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	6b a5       	ldd	r22, Y+43	; 0x2b
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_voidSetPinValue>
			LCD_voidGoTo_XY(0,10);
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	6a e0       	ldi	r22, 0x0A	; 10
    2730:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
			LCD_voidWriteChar(counter+'0');
    2734:	8b a5       	ldd	r24, Y+43	; 0x2b
    2736:	80 5d       	subi	r24, 0xD0	; 208
    2738:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_voidWriteChar>
			flag2=1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	8e a7       	std	Y+46, r24	; 0x2e
			LCD_voidGoTo_XY(1,0);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
			LCD_voidWriteString("garage has space");
    2748:	81 e7       	ldi	r24, 0x71	; 113
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>
			SERVO_voidRotateSpecificAngle_OC1B(90);
    2750:	8a e5       	ldi	r24, 0x5A	; 90
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 ef 0c 	call	0x19de	; 0x19de <SERVO_voidRotateSpecificAngle_OC1B>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	aa ef       	ldi	r26, 0xFA	; 250
    275e:	b3 e4       	ldi	r27, 0x43	; 67
    2760:	8b 87       	std	Y+11, r24	; 0x0b
    2762:	9c 87       	std	Y+12, r25	; 0x0c
    2764:	ad 87       	std	Y+13, r26	; 0x0d
    2766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6b 85       	ldd	r22, Y+11	; 0x0b
    276a:	7c 85       	ldd	r23, Y+12	; 0x0c
    276c:	8d 85       	ldd	r24, Y+13	; 0x0d
    276e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a ef       	ldi	r20, 0xFA	; 250
    2776:	54 e4       	ldi	r21, 0x44	; 68
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	8f 83       	std	Y+7, r24	; 0x07
    2782:	98 87       	std	Y+8, r25	; 0x08
    2784:	a9 87       	std	Y+9, r26	; 0x09
    2786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <main+0x36a>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <main+0x3e8>
	else if (__tmp > 65535)
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <main+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <main+0x3ca>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <main+0x3b8>
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <main+0x3ac>
    2812:	14 c0       	rjmp	.+40     	; 0x283c <main+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <main+0x3f4>
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			SERVO_voidRotateSpecificAngle_OC1B(0);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 ef 0c 	call	0x19de	; 0x19de <SERVO_voidRotateSpecificAngle_OC1B>
    2844:	a7 ce       	rjmp	.-690    	; 0x2594 <main+0x154>
		}
		else if(IR2==0)
    2846:	8c a5       	ldd	r24, Y+44	; 0x2c
    2848:	88 23       	and	r24, r24
    284a:	09 f0       	breq	.+2      	; 0x284e <main+0x40e>
    284c:	a3 ce       	rjmp	.-698    	; 0x2594 <main+0x154>
		{
			flag2=0;
    284e:	1e a6       	std	Y+46, r1	; 0x2e
    2850:	a1 ce       	rjmp	.-702    	; 0x2594 <main+0x154>

00002852 <StartProgram>:


}
/*                      Welcome Massage                       */
void StartProgram (void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearDisplay();
    285a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_voidClearDisplay>
	LCD_voidGoTo_XY (0,1);
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Welcome To MY");
    2866:	83 ea       	ldi	r24, 0xA3	; 163
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_voidGoTo_XY>
	LCD_voidWriteString ("  Smart Garage  ");
    2876:	82 eb       	ldi	r24, 0xB2	; 178
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_voidWriteString>
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <__mulsi3>:
    2884:	62 9f       	mul	r22, r18
    2886:	d0 01       	movw	r26, r0
    2888:	73 9f       	mul	r23, r19
    288a:	f0 01       	movw	r30, r0
    288c:	82 9f       	mul	r24, r18
    288e:	e0 0d       	add	r30, r0
    2890:	f1 1d       	adc	r31, r1
    2892:	64 9f       	mul	r22, r20
    2894:	e0 0d       	add	r30, r0
    2896:	f1 1d       	adc	r31, r1
    2898:	92 9f       	mul	r25, r18
    289a:	f0 0d       	add	r31, r0
    289c:	83 9f       	mul	r24, r19
    289e:	f0 0d       	add	r31, r0
    28a0:	74 9f       	mul	r23, r20
    28a2:	f0 0d       	add	r31, r0
    28a4:	65 9f       	mul	r22, r21
    28a6:	f0 0d       	add	r31, r0
    28a8:	99 27       	eor	r25, r25
    28aa:	72 9f       	mul	r23, r18
    28ac:	b0 0d       	add	r27, r0
    28ae:	e1 1d       	adc	r30, r1
    28b0:	f9 1f       	adc	r31, r25
    28b2:	63 9f       	mul	r22, r19
    28b4:	b0 0d       	add	r27, r0
    28b6:	e1 1d       	adc	r30, r1
    28b8:	f9 1f       	adc	r31, r25
    28ba:	bd 01       	movw	r22, r26
    28bc:	cf 01       	movw	r24, r30
    28be:	11 24       	eor	r1, r1
    28c0:	08 95       	ret

000028c2 <__udivmodsi4>:
    28c2:	a1 e2       	ldi	r26, 0x21	; 33
    28c4:	1a 2e       	mov	r1, r26
    28c6:	aa 1b       	sub	r26, r26
    28c8:	bb 1b       	sub	r27, r27
    28ca:	fd 01       	movw	r30, r26
    28cc:	0d c0       	rjmp	.+26     	; 0x28e8 <__udivmodsi4_ep>

000028ce <__udivmodsi4_loop>:
    28ce:	aa 1f       	adc	r26, r26
    28d0:	bb 1f       	adc	r27, r27
    28d2:	ee 1f       	adc	r30, r30
    28d4:	ff 1f       	adc	r31, r31
    28d6:	a2 17       	cp	r26, r18
    28d8:	b3 07       	cpc	r27, r19
    28da:	e4 07       	cpc	r30, r20
    28dc:	f5 07       	cpc	r31, r21
    28de:	20 f0       	brcs	.+8      	; 0x28e8 <__udivmodsi4_ep>
    28e0:	a2 1b       	sub	r26, r18
    28e2:	b3 0b       	sbc	r27, r19
    28e4:	e4 0b       	sbc	r30, r20
    28e6:	f5 0b       	sbc	r31, r21

000028e8 <__udivmodsi4_ep>:
    28e8:	66 1f       	adc	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	88 1f       	adc	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	1a 94       	dec	r1
    28f2:	69 f7       	brne	.-38     	; 0x28ce <__udivmodsi4_loop>
    28f4:	60 95       	com	r22
    28f6:	70 95       	com	r23
    28f8:	80 95       	com	r24
    28fa:	90 95       	com	r25
    28fc:	9b 01       	movw	r18, r22
    28fe:	ac 01       	movw	r20, r24
    2900:	bd 01       	movw	r22, r26
    2902:	cf 01       	movw	r24, r30
    2904:	08 95       	ret

00002906 <__prologue_saves__>:
    2906:	2f 92       	push	r2
    2908:	3f 92       	push	r3
    290a:	4f 92       	push	r4
    290c:	5f 92       	push	r5
    290e:	6f 92       	push	r6
    2910:	7f 92       	push	r7
    2912:	8f 92       	push	r8
    2914:	9f 92       	push	r9
    2916:	af 92       	push	r10
    2918:	bf 92       	push	r11
    291a:	cf 92       	push	r12
    291c:	df 92       	push	r13
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	ca 1b       	sub	r28, r26
    2930:	db 0b       	sbc	r29, r27
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	09 94       	ijmp

0000293e <__epilogue_restores__>:
    293e:	2a 88       	ldd	r2, Y+18	; 0x12
    2940:	39 88       	ldd	r3, Y+17	; 0x11
    2942:	48 88       	ldd	r4, Y+16	; 0x10
    2944:	5f 84       	ldd	r5, Y+15	; 0x0f
    2946:	6e 84       	ldd	r6, Y+14	; 0x0e
    2948:	7d 84       	ldd	r7, Y+13	; 0x0d
    294a:	8c 84       	ldd	r8, Y+12	; 0x0c
    294c:	9b 84       	ldd	r9, Y+11	; 0x0b
    294e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2950:	b9 84       	ldd	r11, Y+9	; 0x09
    2952:	c8 84       	ldd	r12, Y+8	; 0x08
    2954:	df 80       	ldd	r13, Y+7	; 0x07
    2956:	ee 80       	ldd	r14, Y+6	; 0x06
    2958:	fd 80       	ldd	r15, Y+5	; 0x05
    295a:	0c 81       	ldd	r16, Y+4	; 0x04
    295c:	1b 81       	ldd	r17, Y+3	; 0x03
    295e:	aa 81       	ldd	r26, Y+2	; 0x02
    2960:	b9 81       	ldd	r27, Y+1	; 0x01
    2962:	ce 0f       	add	r28, r30
    2964:	d1 1d       	adc	r29, r1
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	ed 01       	movw	r28, r26
    2972:	08 95       	ret

00002974 <_exit>:
    2974:	f8 94       	cli

00002976 <__stop_program>:
    2976:	ff cf       	rjmp	.-2      	; 0x2976 <__stop_program>
